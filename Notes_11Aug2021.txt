Project title:	Attendance Marking

Entities:
	User

what is meant by registration?
	there is a table called USER_MASTER		(USER is a keyword in most of databases)
		We are adding a new row into that table	(this is called as registration)


	MASTER TABLES HAVE PRIMARY KEY. 		USUALLY DO NOT HAVE FOREIGN KEY
	They are indepdendant tables.	

	DETAILS TABLES HAVE FOREIGN KEY.		USUALLHY THEY ARE TRANSACTIONS
	Ex:
		SALES		PURCHASE

1) Registration		(adding a row in USER_MASTER)
2) Authentication	(SELECT query on USER_MASTER)	
			SELECT * FROM USER_MASTER WHERE employee_id=? AND password=?
				if we get 1 row, then login is successful.
				if we get 0 row, then login is failure


User and Admin both have 
	firstName
	lastName
	age
	gender
	contactNumber
	password
	role		(user/admin)

except
		Users have userId
		Admins have adminId

so why not we keep same table for BOTH user and admin

	let it be userId only for USER table

	add one more field to determine whether it is USER/ ADMIN

	role


SELECT * FROM USER WHERE employeeId=? AND password=?
	what we get is 0-1 row
	that row will contain role column, using that column, we can understand whether he is user or role


how we decide whether we need only user table or admin table or both

when there is only 1 admin in our project, we dont need a separate table for admin
but here, admins also signup (register)

now it is ideal to have 2 tables. 	1 for user 1 for admin
	But both user and admin have same fields

User and Admin both have 
	firstName
	lastName
	age
	gender
	contactNumber
	password


so it is redundant to create 2 tables.
also, then we need to provide 2 login pages? 
	so it is not good idea to create 2 tables.

1 table
1 login form.
	Based on the user name and password they enter, we can find their role

-----------------------------------------------------------------------
for user module:

If class name is 
	RegularEmployee
then table name should be
	REGULAR_EMPLOYEE			Because, in database, usually everything is in upper case. 

If java class variable name is 
	firstName
then column name should be
	FIRST_NAME

User
USER

UNLESS SPECIFIED,
	EACH TABLE HAVE A PRIMARY KEY COLUMN AS "ID:

product
	id

sales table
	product_id				foreign key should be like <<tablename>>_<<columnname>>

id is common for user and admin

every table having primary key named as "id"


1) TABLE		first step in your coding process
	firstName
	lastName.....			as per user story		if required, add additional fields also

2) Entity class in java
	User.java			in a package 		"entity"

3) UserDaoImpl..java			java class
		autowire the JdbcTemplate
	create, read, read (id), update, delete			mthods. if required, additional methods
4) UserDao.java			interface			extract this from impl 

5) User Service			autowire the Dao interface here
6) UserController.java		@RestController			auto wire the service here
		GET, POST, PUT, DELETE mappings here


	end of back end....................................

in angular
1) create service that access the REST API
	use HTTP CLIENT

2) UI forms
	create separate components
		ex:		for user controller in java, 	
					we create 	login component, signup component 
			in this case it is not User Component, it is login + sign components

========================================end of team 1=====================================
Project title:
	E-Learning Management

USER
	id		auto-generate	
	name
	dob
	contactNumber
	password
	address


what is a registration?
	adding a row into the USER table is called regn

Your registration is successful. Kindly note the id


While logging in, the users have option to choose
	user/admin		


i suggest you to have a separate table for admin
because, there is only 1 admin in your project

now based on what he chose while logging in, we can check in admin table or user table


-----------
Lets discuss the naming conventions

in java, class name is User
in db, table name should be USER

IN JAVA, field is (variable is) firstName (for example)
in db, column name should be FIRST_NAME

bcos in db, usually everything is in UPPER CASE

firstName	=	FIRST_NAME

lastName	=	LAST_NAME

JPA repository f/w follows this convention:

we are not using jpa, we are jdbc but convention should be forward thinking

all primary keys can be named as ID

so that foreign keys will become <<TABLENAME_ID>>

user table has ID column	is primary key
sales table has USER_ID		is foreign key

COURSE table has ID as primary key
SALES TABLE	COURSE_ID	means foreign key

1) create tables in the database
	ex:	USER	is a table
2) create entity classes in the java
	ex:	User.java	(in entity package)
3) create dao impl classes 
	ex:	UserDaoImpl.java	autowire the JdbcTemplate here
4) extract dao interfaces
	ex:	UserDao.java		interface
5) create service classes
	ex: 	UserService.java	autowire the dao interface here
6) create the controller classes
	ex:	UserController.java	autowire the service here

--------------------------------------------------
IN FRONT END
1) angular
	create components for controllers
	not necessarily 1 component per 1 controller
	ex:
		user controller will be used by 2 components.		1) signup component	2) login component

1 member in each team can parallely, work on angular also. It is okay no problem


spending time of validation, user friendliness, navigation
	that should be focused on second sprint only

in 1st sprint	focus on creating individual component	like LOGIN, SIGNUP, SKILL
	plug each component in app component, test it one by one and move to next component
